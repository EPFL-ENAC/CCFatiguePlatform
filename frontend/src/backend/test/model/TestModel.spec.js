/**
 * ccfatigue
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", process.cwd() + "/src/index"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require(process.cwd() + "/src/index"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Ccfatigue);
  }
})(this, function (expect, Ccfatigue) {
  "use strict";

  var instance;

  beforeEach(function () {
    instance = new Ccfatigue.TestModel();
  });

  var getProperty = function (object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === "function") return object[getter]();
    else return object[property];
  };

  var setProperty = function (object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === "function") object[setter](value);
    else object[property] = value;
  };

  describe("TestModel", function () {
    it("should create an instance of TestModel", function () {
      // uncomment below and update the code to test TestModel
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be.a(Ccfatigue.TestModel);
    });

    it('should have the property id (base name: "id")', function () {
      // uncomment below and update the code to test the property id
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property experimentId (base name: "experiment_id")', function () {
      // uncomment below and update the code to test the property experimentId
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property specimenNumber (base name: "specimen_number")', function () {
      // uncomment below and update the code to test the property specimenNumber
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property specimenName (base name: "specimen_name")', function () {
      // uncomment below and update the code to test the property specimenName
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property stressRatio (base name: "stress_ratio")', function () {
      // uncomment below and update the code to test the property stressRatio
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property maximumStress (base name: "maximum_stress")', function () {
      // uncomment below and update the code to test the property maximumStress
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property frequency (base name: "frequency")', function () {
      // uncomment below and update the code to test the property frequency
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property runOut (base name: "run_out")', function () {
      // uncomment below and update the code to test the property runOut
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property displacementControlledLoadingRate (base name: "displacement_controlled_loading_rate")', function () {
      // uncomment below and update the code to test the property displacementControlledLoadingRate
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property loadControlledLoadingRate (base name: "load_controlled_loading_rate")', function () {
      // uncomment below and update the code to test the property loadControlledLoadingRate
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function () {
      // uncomment below and update the code to test the property length
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function () {
      // uncomment below and update the code to test the property width
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property thickness (base name: "thickness")', function () {
      // uncomment below and update the code to test the property thickness
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property temperature (base name: "temperature")', function () {
      // uncomment below and update the code to test the property temperature
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property humidity (base name: "humidity")', function () {
      // uncomment below and update the code to test the property humidity
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property initialCrackLength (base name: "initial_crack_length")', function () {
      // uncomment below and update the code to test the property initialCrackLength
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });

    it('should have the property measuringPoints (base name: "measuring_points")', function () {
      // uncomment below and update the code to test the property measuringPoints
      //var instance = new Ccfatigue.TestModel();
      //expect(instance).to.be();
    });
  });
});
