/* tslint:disable */
/* eslint-disable */
/**
 * ccfatigue
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * App Info
 * @export
 * @interface AppInfo
 */
export interface AppInfo {
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    'version': string;
}
/**
 * Defines how experiment is seen on the API
 * @export
 * @interface ExperimentModel
 */
export interface ExperimentModel {
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'laboratory': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'researcher': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'experiment_type': string;
    /**
     * 
     * @type {boolean}
     * @memberof ExperimentModel
     */
    'fracture': boolean;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'fracture_mode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'initial_crack_length'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'fatigue_test_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'measuring_equipment'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'reliability_level'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'control_mode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'publication_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'publication_author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'publication_year'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'publication_doi'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'publication_images_repository'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'material_type_fiber_material'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'material_type_fiber_geometry'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'material_type_area_density'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'material_type_resin'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'material_type_hardener'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'material_type_mixing_ratio'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'geometry_length': number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'geometry_width': number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'geometry_thickness': number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'laminates_and_assemblies_curing_time'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'laminates_and_assemblies_curing_temperature'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'laminates_and_assemblies_curing_pressure'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'laminates_and_assemblies_fiber_content'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentModel
     */
    'laminates_and_assemblies_stacking_sequence'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'test_condtions_temperature'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'test_condtions_humidity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'dic_analysis_subset_size'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExperimentModel
     */
    'dic_analysis_step_size'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get AppInfo
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get AppInfo
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Get AppInfo
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<AppInfo> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get AppInfo
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExperimentsApi - axios parameter creator
 * @export
 */
export const ExperimentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all experiments
         * @summary Get Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentsExperimentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentsApi - functional programming interface
 * @export
 */
export const ExperimentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperimentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all experiments
         * @summary Get Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentsExperimentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperimentModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentsExperimentsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExperimentsApi - factory interface
 * @export
 */
export const ExperimentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperimentsApiFp(configuration)
    return {
        /**
         * Get all experiments
         * @summary Get Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentsExperimentsGet(options?: any): AxiosPromise<Array<ExperimentModel>> {
            return localVarFp.getExperimentsExperimentsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperimentsApi - object-oriented interface
 * @export
 * @class ExperimentsApi
 * @extends {BaseAPI}
 */
export class ExperimentsApi extends BaseAPI {
    /**
     * Get all experiments
     * @summary Get Experiments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentsApi
     */
    public getExperimentsExperimentsGet(options?: AxiosRequestConfig) {
        return ExperimentsApiFp(this.configuration).getExperimentsExperimentsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


